import org.optaplanner.core.api.score.buildin.simplelong.SimpleLongScoreHolder;
import com.rhc.gerrymandering.domain.Block;
import com.rhc.gerrymandering.domain.SumationInfo;







 

global SimpleLongScoreHolder scoreHolder;


rule "distribute population"
when
     $district: Integer()
     SumationInfo($average: averagePerDistrict)
     $populationSum: Long() from accumulate(
         Block( district == $district, $population: population),
         sum($population)
     )
then        
        scoreHolder.addConstraintMatch(kcontext, -10*(($populationSum-$average)*($populationSum-$average)));
end



rule "minimizing Latitude Varience"  
when
     $district: Integer()
     accumulate(
         Block( district == $district, $lat: expandedLat),
         $result: variance($lat)
     )
then 

       //System.out.println("district: " + $district + ", variance: " + $result + " " + kcontext);
       if($result.equals(Double.NaN) ){
              scoreHolder.addConstraintMatch(kcontext, -100000000000L);
        }else{
                scoreHolder.addConstraintMatch(kcontext, -($result.longValue()));
        
        }
       
      // scoreHolder.addConstraintMatch(kcontext, - (long) $result.getMeanDeviationSquaredSumRoot(100));
        
        
        
end 



rule "minimizing Long Varience"  
when
     $district: Integer()
     accumulate(
         Block( district == $district, $long: expandedLong),
         $result: variance($long) 
     )
then
       if($result.equals(Double.NaN)){          
              scoreHolder.addConstraintMatch(kcontext, -100000000000L);
       }else{
             scoreHolder.addConstraintMatch(kcontext, -($result.longValue()));
        
        }
       
            //  scoreHolder.addConstraintMatch(kcontext, - (long) $result.getMeanDeviationSquaredSumRoot(100));
       
        
end







