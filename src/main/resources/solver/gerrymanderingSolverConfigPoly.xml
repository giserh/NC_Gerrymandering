<?xml version="1.0" encoding="UTF-8"?>

<solver>
	<!-- <environmentMode>FAST_ASSERT</environmentMode> -->

	<scanAnnotatedClasses />


	<!-- Score configuration -->
	t
	<scoreDirectorFactory>
		<scoreDrl>solver/polygonAccumulateRules.drl</scoreDrl>
		<initializingScoreTrend>ONLY_DOWN</initializingScoreTrend>
		<kieBaseConfigurationProperties>
			<drools.equalityBehavior>EQUALITY</drools.equalityBehavior>
		</kieBaseConfigurationProperties>
	</scoreDirectorFactory>

	<!-- Optimization algorithms configuration -->
	<termination>
		<minutesSpentLimit>4</minutesSpentLimit>
	</termination>


	<!-- Optimization algorithms configuration -->
	<constructionHeuristic />
	<localSearch>

		<termination>
			<minutesSpentLimit>20</minutesSpentLimit>
		</termination>

		<changeMoveSelector />

		<!-- <unionMoveSelector> <changeMoveSelector /> <swapMoveSelector /> -->
		<!-- To escape the local optimum in this knapsack variant, add pillar swap moves to swap 2 sets of states. -->
		<!-- <pillarSwapMoveSelector /> </unionMoveSelector> <forager> <acceptedCountLimit>1000</acceptedCountLimit> </forager> -->
	</localSearch>

	<localSearch>



		<unionMoveSelector>
			<changeMoveSelector />
			<swapMoveSelector>
				<entitySelector id="entitySelector" />
				<secondaryEntitySelector>
					<nearbySelection>
						<originEntitySelector mimicSelectorRef="entitySelector" />
						<nearbyDistanceMeterClass>com.rhc.gerrymandering.domain.BlockDistanceSingleMeter</nearbyDistanceMeterClass>
						<parabolicDistributionSizeMaximum>50</parabolicDistributionSizeMaximum>
					</nearbySelection>
				</secondaryEntitySelector>
			</swapMoveSelector>
			<swapMoveSelector>
				<entitySelector id="entitySelector2" />
				<secondaryEntitySelector>
					<nearbySelection>
						<originEntitySelector mimicSelectorRef="entitySelector2" />
						<nearbyDistanceMeterClass>com.rhc.gerrymandering.domain.BlockDistanceMeter</nearbyDistanceMeterClass>
						<parabolicDistributionSizeMaximum>50</parabolicDistributionSizeMaximum>
					</nearbySelection>
				</secondaryEntitySelector>
			</swapMoveSelector>
			<moveIteratorFactory>
				<moveIteratorFactoryClass>com.rhc.gerrymandering.move.EdgePillarMoveFactory</moveIteratorFactoryClass>
			</moveIteratorFactory>
		</unionMoveSelector>


	</localSearch>





	-






	<!-- <localSearch> <pillarSwapMoveSelector> <pillarSelector> <subPillarEnabled>true</subPillarEnabled> <minimumSubPillarSize>1</minimumSubPillarSize> 
		<maximumSubPillarSize>4</maximumSubPillarSize> </pillarSelector> </pillarSwapMoveSelector> </localSearch> -->





</solver>